{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","Fragment","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gQAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,cAAC,IAAMC,SAAP,UACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,gCACI,6BAAKN,IACL,4BAAIC,aCeTM,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,cAAC,IAAML,SAAP,UACI,8BAEQK,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,OAHZU,WCItBC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,G,MARA,SAACC,GACZ,OACI,qBAAKf,UAAU,SAAf,SACMe,EAAMC,aCwCLC,G,wDAtCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEX,YAAaU,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACTnB,OAAQ,GACRK,YAAa,IAJP,E,gEAQO,IAAD,OAChBe,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEhB,OAAQwB,S,+BAOrC,IAAD,EAC2BC,KAAKN,MAA7BnB,EADH,EACGA,OAAQK,EADX,EACWA,YACVqB,EAAiB1B,EAAO2B,QAAO,SAAAC,GACjC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASzB,EAAYwB,kBAGzD,OAAQ7B,EAAO+B,OAGP,sBAAKnC,UAAU,KAAf,UACI,oBAAIA,UAAU,aAAd,yBACA,cAAC,EAAD,CAAWU,aAAcmB,KAAKX,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUd,OAAQ0B,SAN9B,oBAAI9B,UAAU,yBAAd,yB,GA1BMoC,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.59d4931e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <React.Fragment>\n            <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    return (\n        <React.Fragment>\n            <div>\n                {\n                    robots.map((user, i) => {\n                        return (\n                            <Card\n                                key={i}\n                                id={robots[i].id}\n                                name={robots[i].name}\n                                email={robots[i].email}\n                            />\n                        );\n                    })\n                }\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\"\n                placeholder=\"Search Robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scroll\">\n            { props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n\n        return !robots.length ?\n            <h1 className=\"tc f-headline lh-solid\">Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='roboHeader'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}